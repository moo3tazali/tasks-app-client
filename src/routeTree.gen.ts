/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as PublicRouteImport } from './routes/_public/route'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as DashboardSettingsIndexImport } from './routes/dashboard/settings/index'
import { Route as DashboardhomeIndexImport } from './routes/dashboard/(home)/index'
import { Route as PublicAboutIndexImport } from './routes/_public/about/index'
import { Route as PublichomeIndexImport } from './routes/_public/(home)/index'
import { Route as AuthRegisterIndexImport } from './routes/_auth/register/index'
import { Route as AuthLoginIndexImport } from './routes/_auth/login/index'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const PublicRouteRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const DashboardSettingsIndexRoute = DashboardSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardhomeIndexRoute = DashboardhomeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const PublicAboutIndexRoute = PublicAboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => PublicRouteRoute,
} as any)

const PublichomeIndexRoute = PublichomeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)

const AuthRegisterIndexRoute = AuthRegisterIndexImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/register/': {
      id: '/_auth/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterIndexImport
      parentRoute: typeof AuthRouteImport
    }
    '/_public/(home)/': {
      id: '/_public/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublichomeIndexImport
      parentRoute: typeof PublicRouteImport
    }
    '/_public/about/': {
      id: '/_public/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof PublicAboutIndexImport
      parentRoute: typeof PublicRouteImport
    }
    '/dashboard/(home)/': {
      id: '/dashboard/(home)/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardhomeIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/settings/': {
      id: '/dashboard/settings/'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface AuthRouteRouteChildren {
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthRegisterIndexRoute: typeof AuthRegisterIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthRegisterIndexRoute: AuthRegisterIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublichomeIndexRoute: typeof PublichomeIndexRoute
  PublicAboutIndexRoute: typeof PublicAboutIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublichomeIndexRoute: PublichomeIndexRoute,
  PublicAboutIndexRoute: PublicAboutIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardhomeIndexRoute: typeof DashboardhomeIndexRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardhomeIndexRoute: DashboardhomeIndexRoute,
  DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof AuthLoginIndexRoute
  '/register': typeof AuthRegisterIndexRoute
  '/': typeof PublichomeIndexRoute
  '/about': typeof PublicAboutIndexRoute
  '/dashboard/': typeof DashboardhomeIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof AuthLoginIndexRoute
  '/register': typeof AuthRegisterIndexRoute
  '/': typeof PublichomeIndexRoute
  '/about': typeof PublicAboutIndexRoute
  '/dashboard': typeof DashboardhomeIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/_auth/login/': typeof AuthLoginIndexRoute
  '/_auth/register/': typeof AuthRegisterIndexRoute
  '/_public/(home)/': typeof PublichomeIndexRoute
  '/_public/about/': typeof PublicAboutIndexRoute
  '/dashboard/(home)/': typeof DashboardhomeIndexRoute
  '/dashboard/settings/': typeof DashboardSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/dashboard'
    | '/login'
    | '/register'
    | '/'
    | '/about'
    | '/dashboard/'
    | '/dashboard/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/register'
    | '/'
    | '/about'
    | '/dashboard'
    | '/dashboard/settings'
  id:
    | '__root__'
    | '/_auth'
    | '/_public'
    | '/dashboard'
    | '/_auth/login/'
    | '/_auth/register/'
    | '/_public/(home)/'
    | '/_public/about/'
    | '/dashboard/(home)/'
    | '/dashboard/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_public",
        "/dashboard"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/login/",
        "/_auth/register/"
      ]
    },
    "/_public": {
      "filePath": "_public/route.tsx",
      "children": [
        "/_public/(home)/",
        "/_public/about/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/(home)/",
        "/dashboard/settings/"
      ]
    },
    "/_auth/login/": {
      "filePath": "_auth/login/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/register/": {
      "filePath": "_auth/register/index.tsx",
      "parent": "/_auth"
    },
    "/_public/(home)/": {
      "filePath": "_public/(home)/index.tsx",
      "parent": "/_public"
    },
    "/_public/about/": {
      "filePath": "_public/about/index.tsx",
      "parent": "/_public"
    },
    "/dashboard/(home)/": {
      "filePath": "dashboard/(home)/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings/": {
      "filePath": "dashboard/settings/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
